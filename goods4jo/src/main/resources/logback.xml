<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">
	<!--
 [Layout]
 %m : 로그내용이 출력
 %p : trace > debug > info > warn > error 등의 priority 출력
 %r : 어플리케이션이 시작되어 로깅이벤트가 발생하는 시점까지의 경과시간을 밀리세컨드로 출력
 %c : 예) 카테고리가 a.b.c 처럼 되어있다면 %c{2}는 b.c가 출력됩니다.
 %n :  플랫폼 종속적인 개행문자가 출력된다. \r\n 또는 \n 일것이다
 %d : 로깅이벤트가 일어나 날짜 출력 ( 프로그램의 실행속도를 느리게 한다.)
     예) %d{HH:mm:ss} 또는 %d{dd MMMM yyyy HH:mm:ss}
 %C : 호출자의 클래스명 출력
    예) 클래스구조가 org.apache.xyz.SomeClass 처럼 되어있다면 %C{2}는 xyz.SomeClass 가 출력됩니다
 %M : 로깅이 발생한 method 이름을 나타냅니다.
 %F : 로깅이 발생한 프로그램 파일명을 나타냅니다.
 %l : 로깅이 발생한 caller의 정보를 나타냅니다 
 %L : 로깅이 발생한 caller의 라인수를 나타냅니다 
 %x : 로깅이 발생한 thread와 관련된 NDC(nested diagnostic context)를 출력합니다. 
 %X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. 
 %% : % 표시를 출력하기 위해 사용한다.  
 %t : 로그이벤트가 발생된 쓰레드의 이름을 출력합니다
-->
		
<!--  ConsoleAppender는 콘솔에 로그를 어떤 포맷으로 출력할지 설정할 때 사용하는 것 -->
	<appender name="CONSOLE"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<Pattern>%d{HH:mm} %-5level %logger{36} - %msg%n</Pattern>
		</encoder>
	</appender>

	<!--SLF4J는 로그를 남기기 위한 공통 인터페이스이다. SLF4J로 logback 라이브러리를 이용하여 로그를 남기는 것이므로, 
		실제 로그를 남기는 것은 logback 라이브러리다. 그래서 logback 설정을 해줘야 한다. logback 설정 파일은 logback.xml 
		파일이다. resource 폴더에 logback.xml 파일을 작성한다. -->
	<!-- RollingFileAppender는 로그 양이 많아지면 하나의 파일로 관리하기가 어려워진다. 이런 문제를 방지하기 위해 하루 단위로 로그 파일을 백업하면서 로그를 남기고자 할 때 사용할 수 있다. -->	
	
	<appender name="FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>c:\logs\logback\access.log</file>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>C:\logs\logback\access-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxHistory>30</maxHistory>
		</rollingPolicy>

		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">>
			<Pattern>%d{HH:mm} %-5level %logger{36} - %msg%n</Pattern>
		</encoder>
		
		 <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                           <MaxFileSize>50KB</MaxFileSize>
                  </triggeringPolicy>
	</appender>
	
<!-- logback 설정에서 logger라는 엘리먼트는 어떤 패키지 이하의 클래스에서 어떤 레벨 이상의 로그를 출력할지 결정할 때 사용한다. -->
	<logger name="org.springframework" level="info" />
	<logger name="kr.or.connect" level="debug" />
	<!-- Loggers -->
    <logger name="org.apache.catalina" level="ERROR">
    </logger>
    
    <logger name="org.apache.commons" level="ERROR">
    </logger>
    
    <logger name="org.springframework" level="DEBUG" >
    </logger>
    
    <logger name="egovframework.*" level="DEBUG">
    </logger>
    
    <logger name="java.sql" level="DEBUG">
    </logger>
    
    <logger name="org.mybatis.spring" level="DEBUG">
    </logger>
    
    <logger name="egovframework.sqlmappers" level="TRACE">
    </logger>
<!-- 이렇게 root 태그에 설정을 한다면, 모든 대상에 CONSOLE, FILE Appender를 적용하라는 의미이다.
이렇게 하면 콘솔과 파일로 두 번 로그를 출력하게 된다. -->

	<root level="debug">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="FILE" />
	</root>
</configuration>